description: |-
This document will join or unjoin an EC2 Windows instance to an Active Directory domain.

## Create parameters in Parameter Store

The Automation runbook requires parameters stored in SSM Parameter Store to complete the domain join and unjoining activities. This includes the AD domain name (FQDN), AD username, AD password, and a targetOU. To learn more about Parameter Store, visit the [AWS documentation](https://docs.aws.amazon.com/systems-manager/latest/userguide/systems-manager-parameter-store.html).

Create new parameters as shown below (NOTE, the parameter names and values are cAsE-SeNsItIvE):

## AD domain name
- **Name** : *domainName*
- **Type** : String
- **Data type** : text
- **Value** : *corp.example.com*

## AD user with domain join rights
- **Name** : *domainJoinUserName*
- **Type** : String
- **Data type** : text
- **Value** : *CORP\domainadmin*

## AD user password
*Requires an AWS KMS key*
- **Name** : *domainJoinPassword*
- **Type** : SecureString
- **Data type** : text
- **Value** : *YOURSECRET*
- NOTE, the secret requires an AWS KMS key ID.

## Specify the target Organization Unit (OU) for the domain account.
- **Name** : *defaultTargetOU*
- **Type** : String
- **Data type** : text
- **Value** : *OU=Servers,OU=CORP,dc=corp,dc=example,dc=com*
schemaVersion: '0.3'
assumeRole: '{{AutomationAssumeRole}}'
parameters:
InstanceId:
type: String
description: (Required) The Instance running Windows Server.
DomainJoinActivity:
type: String
description: '(Required) Select which AD domain activity to perform, join an AD domain or unjoin an AD domain.'
allowedValues:
  - Join
  - Unjoin
  - ''
default: ''
LifecycleTransition:
type: String
description: '(Optional) Auto Scaling Group Lifecyle Transition, launching or terminating, to determine domain join or unjoin activities. NOTE, Amazon EventBridge leverages this parameter.'
default: ''
AutomationAssumeRole:
type: String
description: (Optional) The ARN of the role that allows Automation to perform the actions on your behalf.
default: ''
mainSteps:
- name: chooseDomainJoinActivity
action: 'aws:branch'
inputs:
  Choices:
    - Or:
        - Variable: '{{LifecycleTransition}}'
          StringEquals: 'autoscaling:EC2_INSTANCE_LAUNCHING'
        - Variable: '{{DomainJoinActivity}}'
          StringEquals: Join
      NextStep: joinDomain
    - Or:
        - Variable: '{{LifecycleTransition}}'
          StringEquals: 'autoscaling:EC2_INSTANCE_TERMINATING'
        - Variable: '{{DomainJoinActivity}}'
          StringEquals: Unjoin
      NextStep: unjoinDomain
isCritical: 'true'
isEnd: false
timeoutSeconds: 60
description: 'Determine the appropriate AD domain activity, join or unjoin.'
- name: joinDomain
action: 'aws:runCommand'
inputs:
  DocumentName: AWS-RunPowerShellScript
  InstanceIds:
    - '{{ InstanceId }}'
  Parameters:
    commands: |-
      # Define AD domain specific variables. This is a combination of EC2 Tag values and SSM Parameter Store objects.
      $targetOU = (Get-SSMParameterValue -Name "defaultTargetOU").Parameters[0].Value
      $domainName = (Get-SSMParameterValue -Name "domainName").Parameters[0].Value
      $domainJoinUserName = (Get-SSMParameterValue -Name "domainJoinUserName").Parameters[0].Value
      $domainJoinPassword = (Get-SSMParameterValue -Name "domainJoinPassword" -WithDecryption:$true).Parameters[0].Value | ConvertTo-SecureString -AsPlainText -Force
      $domainCredential = New-Object System.Management.Automation.PSCredential($domainJoinUserName,$domainJoinPassword)

      # Domain join check. If the server is not part of a domain (in a Windows Workgroup), then the server will be joined to the domain.
      if ((Get-WmiObject -Class Win32_ComputerSystem).PartOfDomain -eq $false) {
        Add-Computer -ComputerName $env:COMPUTERNAME -DomainName $domainName -Credential $domainCredential -OUPath $targetOU -ErrorAction Stop -Restart:$false
        Write-Host "Joining $env:COMPUTERNAME to Active Directory domain: $domainName.`nMoving $env:COMPUTERNAME to the following OU: $targetOU.`n"
        Restart-Computer -Force
        exit 3010
      }
description: Execute PowerShell locally on EC2 instance to join the AD domain.
timeoutSeconds: 600
isEnd: false
nextStep: describeADComputer
- name: describeADComputer
action: 'aws:runCommand'
inputs:
  DocumentName: AWS-RunPowerShellScript
  InstanceIds:
    - '{{ InstanceId }}'
  Parameters:
    commands: |-
      # RSAT AD Tools check.
      if (-not (Get-WindowsFeature -Name RSAT-AD-Tools).Installed) {
        Write-Host "Installing RSAT AD Tools to modify the AD Computer description.`n"
        Add-WindowsFeature -Name RSAT-AD-Tools | Out-Null
        Write-Host "Installation of RSAT AD Tools completed.`n"
      }

      $identity = $env:COMPUTERNAME
      $domainName = (Get-SSMParameterValue -Name "domainName").Parameters[0].Value
      $domainJoinUserName = (Get-SSMParameterValue -Name "domainJoinUserName").Parameters[0].Value
      $domainJoinPassword = (Get-SSMParameterValue -Name "domainJoinPassword" -WithDecryption:$true).Parameters[0].Value | ConvertTo-SecureString -AsPlainText -Force
      $domainCredential = New-Object System.Management.Automation.PSCredential($domainJoinUserName,$domainJoinPassword)

      Write-Host "$identity has successfully joined $domainName.`n"

      # Update AD Computer description.
      $instanceId = '{{InstanceId}}'
      Set-ADComputer -Identity $identity -Description "$instanceId" -Credential $domainCredential

      # Remove RSAT AD Tools from the server.
      Write-Host "Removing RSAT AD Tools from $identity."
      Remove-WindowsFeature -Name RSAT-AD-Tools | Out-Null
      Write-Host "Uninstallation of RSAT AD Tools completed.`n"

      # Restart the computer one last time to complete the entire process.
      Write-Host "Restarting the server one last time."
      Restart-Computer -Force
      exit 0
description: Add the InstanceID to the AD Computers description.
timeoutSeconds: 600
isEnd: false
nextStep: createEC2NameTag
- name: createEC2NameTag
action: 'aws:createTags'
inputs:
  ResourceType: EC2
  ResourceIds:
    - '{{InstanceId}}'
  Tags:
    - Key: ADJoined
      Value: Joined
timeoutSeconds: 60
isEnd: true
description: Tag EC2 instance with random string. (Meetings Windows Server minimum requirements.)
- name: unjoinDomain
action: 'aws:runCommand'
inputs:
  DocumentName: AWS-RunPowerShellScript
  InstanceIds:
    - '{{ InstanceId }}'
  Parameters:
    commands: |-
      # Define AD domain specific variables. This is a combination of EC2 Tag values and SSM Parameter Store objects.
      $domainName = (Get-SSMParameterValue -Name domainName).Parameters[0].Value
      $domainJoinUserName = (Get-SSMParameterValue -Name "domainJoinUserName").Parameters[0].Value
      $domainJoinPassword = (Get-SSMParameterValue -Name "domainJoinPassword" -WithDecryption:$true).Parameters[0].Value | ConvertTo-SecureString -AsPlainText -Force
      $domainCredential = New-Object System.Management.Automation.PSCredential($domainJoinUserName,$domainJoinPassword)

      if (-not (Get-WindowsFeature -Name RSAT-AD-Tools).Installed) {
          Write-Host "Installing RSAT AD Tools to allow domain joining.`n"
          Add-WindowsFeature -Name RSAT-AD-Tools | Out-Null
          Write-Host "Installation of RSAT AD Tools completed.`n"
      }

      $getADComputer = (Get-ADComputer -Identity $env:COMPUTERNAME -Credential $domainCredential)
      $distinguishedName = $getADComputer.DistinguishedName

      # Domain join check
      if ((Get-WmiObject -Class Win32_ComputerSystem).PartOfDomain -eq $true) {
          Write-Host "Unjoining $env:COMPUTERNAME from Active Directory domain: $domainName.`n"

          # Unjoin from AD and remove the AD computer object.'
          Remove-Computer -ComputerName $env:COMPUTERNAME -UnjoinDomaincredential $domainCredential -Verbose -Force -Restart:$false
          Remove-ADComputer -Credential $domainCredential -Identity $distinguishedName -Server $domainName -Confirm:$False -Verbose

          Write-Host "$env:COMPUTERNAME has unjoined from the $domainName domain and in a Windows Workgroup."
      } else {
          Write-Host "$env:COMPUTERNAME is not part of the Active Directory domain $domainName and already part of a Windows Workgroup."
      }
      exit 0
